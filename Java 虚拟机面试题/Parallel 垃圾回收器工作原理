**Parallel 垃圾回收器**（也称为**吞吐量垃圾回收器**）是 Java 虚拟机（JVM）中一种注重**高吞吐量**的垃圾收集器。它的主要设计目标是最大化应用程序的吞吐量，允许应用在垃圾回收过程中尽可能多地执行工作。Parallel GC 尽量减少垃圾回收时间，以便将更多时间用于应用程序执行，而不是垃圾回收操作。

Parallel GC 使用**多线程并行**执行垃圾回收的任务，主要分为处理**新生代**和**老年代**的垃圾收集操作。

### Parallel 垃圾回收器的工作原理

#### 1. **新生代垃圾回收（Minor GC）**
   - **算法**：**复制算法**（Copying Algorithm）
   - **特点**：完全暂停应用程序（Stop-The-World），并发执行。

新生代使用的是**复制算法**（即标记-复制），分为三个区域：**Eden** 和两个 **Survivor** 区域（S0 和 S1）。对象最初在 Eden 区域分配，当 Eden 区域满了时，会触发新生代垃圾回收（Minor GC），回收过程如下：

- 新生代 GC 扫描 **Eden** 和当前使用的 **Survivor** 区域（S0 或 S1），标记出存活的对象。
- 将存活的对象复制到另一个 **Survivor** 区域。
- 清空 Eden 和之前的 Survivor 区域，释放这些区域的内存。
- 如果对象在 Survivor 区域中经过了几次 GC 仍然存活（达到一定阈值，如默认 15 次），则该对象会被提升（晋升）到 **老年代**。
- 整个过程中应用线程暂停，Parallel GC 会使用多个线程并行执行这一回收过程。

#### 2. **老年代垃圾回收（Major GC 或 Full GC）**
   - **算法**：**标记-清除-整理算法**（Mark-Sweep-Compact）
   - **特点**：完全暂停应用程序（Stop-The-World），并发执行。

老年代使用的是**标记-清除-整理**算法（Mark-Sweep-Compact），回收过程如下：

- **标记阶段**：从 GC Roots 开始，标记所有可达的存活对象。Parallel GC 会使用多线程并行标记对象，标记阶段会暂停应用线程。
- **清除阶段**：标记阶段结束后，Parallel GC 会清除未被标记的不可达对象，并释放这些对象占用的内存空间。
- **整理阶段**：与 CMS 不同的是，Parallel GC 会进行**压缩**（Compaction），即将存活对象压缩到一边，以避免内存碎片问题。这一过程也需要暂停应用线程。

老年代的 GC 一般称为 **Major GC**，但如果同时对新生代和老年代进行回收，则称为 **Full GC**。Full GC 会导致较长的应用停顿，因为不仅老年代的回收需要停顿，新生代的垃圾也需要一同回收。

#### 3. **Parallel GC 的并行性**
   - **多线程并行处理**：无论是新生代的 Minor GC 还是老年代的 Major GC，Parallel GC 都会使用多个 CPU 内核来并行执行垃圾回收操作。
   - **吞吐量优化**：Parallel GC 优化的目标是最大化吞吐量，即在给定时间内最大化应用程序的执行时间。它会尝试通过并行回收和暂停应用线程来快速释放内存。
   - **吞吐量优先**：为了更高的吞吐量，Parallel GC 会容忍较长的停顿时间，尤其在老年代回收时，停顿可能比较明显。

### Parallel 垃圾回收器的配置

- **-XX:+UseParallelGC**：启用 Parallel GC（也叫吞吐量垃圾回收器）。
- **-XX:ParallelGCThreads=N**：设置用于并行垃圾回收的线程数。
- **-XX:+UseParallelOldGC**：启用并行老年代收集，支持并行的老年代垃圾回收。

### Parallel GC 的优点

1. **高吞吐量**：Parallel GC 的设计目标是最大化吞吐量，它通过并行化的回收方式减少垃圾回收的总体时间，从而将更多的时间用于应用执行。
2. **多线程并行**：不论是新生代还是老年代的回收，Parallel GC 都是多线程并行执行，能够充分利用多核 CPU 资源。
3. **适合大堆内存场景**：由于并行执行和压缩机制，Parallel GC 非常适合大内存、高负载的场景，尤其是吞吐量优先的应用。

### Parallel GC 的缺点

1. **长时间停顿**：由于 Parallel GC 追求的是最大吞吐量而非最小停顿时间，老年代的垃圾回收（特别是 Full GC）会导致较长时间的停顿，影响对响应时间敏感的应用。
2. **不适合低延迟场景**：对于对响应时间要求苛刻的应用（如实时系统或高频交易系统），Parallel GC 不是最佳选择，因为它的 STW 停顿时间可能较长。

---

### 总结：
Parallel GC 是一种非常适合高吞吐量应用的垃圾回收器，它通过并行化的回收过程来减少总的垃圾回收时间，适合在大堆内存场景下运行。虽然它会在某些时候引起较长的应用停顿，但在吞吐量优先的场景中，其性能表现非常优异。

你对 Parallel GC 的哪个部分感兴趣，想要进一步探讨吗？
