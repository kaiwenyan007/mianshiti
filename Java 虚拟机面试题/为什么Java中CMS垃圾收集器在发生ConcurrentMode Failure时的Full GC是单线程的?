在 Java 的 CMS（Concurrent Mark-Sweep）垃圾收集器中，当发生 **Concurrent Mode Failure** 时，触发的 **Full GC** 是单线程的，主要原因可以归结为 CMS 的设计和回退机制：

1. **CMS 是以并发为主的垃圾收集器**：
   - CMS 的设计初衷是通过并发回收，减少垃圾收集导致的应用停顿时间。它的老年代回收分为并发标记和并发清除阶段。
   - 但是，当发生 **Concurrent Mode Failure** 时，表示 CMS 无法在应用程序线程持续分配内存的同时及时完成并发回收。此时，JVM 会回退到 **Full GC** 来进行老年代的回收。

2. **回退到 Serial Old GC**：
   - 发生 **Concurrent Mode Failure** 时，CMS 收集器会回退到默认的老年代垃圾回收机制，即 **Serial Old GC**。这是一个单线程的标记-清除算法，专注于彻底回收老年代中的所有对象。
   - 由于 CMS 并不对内存进行压缩（整理），Full GC 的主要目的是确保有足够的内存可以继续分配对象。因此，JVM 选择了简单且可靠的单线程回收模式。

3. **历史原因与设计简化**：
   - CMS 的 Full GC 单线程执行可能源于历史设计中的简化。CMS 是相对较早的并发垃圾回收器，设计时的硬件环境和 JVM 实现更加倾向于通过单线程保证 Full GC 的稳定性和正确性。
   - 虽然单线程 Full GC 的性能较差，但它是一种稳定的“最后手段”，确保垃圾回收可以顺利完成，不会因为多线程复杂性而导致更多问题。

4. **CMS 不擅长大规模内存回收**：
   - CMS 主要适用于并发回收老年代，避免停顿，但在大规模的 Full GC 场景下，CMS 的单线程 Full GC 处理能力相对较差。为此，JVM 在设计时没有对 CMS 的 Full GC 进行并行化处理。

### 解决方案：
- **增加并发垃圾回收线程**：通过参数 `-XX:ConcGCThreads` 增加 CMS 的并发垃圾回收线程，减少发生 **Concurrent Mode Failure** 的概率。
- **提高 CMS 提前回收的触发点**：通过 `-XX:CMSInitiatingOccupancyFraction` 提前触发 CMS 的回收，避免老年代占用率过高导致 Full GC。
- **G1 收集器**：由于 CMS 在高内存压力下可能导致性能问题，推荐切换到 G1 收集器。G1 在发生 Full GC 时支持多线程，并能更好地管理内存碎片。

你还有其他相关的 JVM 垃圾回收问题吗？
