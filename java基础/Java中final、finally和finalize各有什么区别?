在 Java 中，`final`、`finally` 和 `finalize` 是三个功能不同的概念，虽然它们的名称相似，但各自有不同的用途。

### 1. `final`
- **修饰符**：`final` 是一个关键字，用于修饰类、方法和变量，旨在保证其不可改变。
  - **用于类**：当一个类被声明为 `final` 时，该类不能被继承。例如，`public final class MyClass` 表示其他类不能继承 `MyClass`。
  - **用于方法**：当方法被声明为 `final` 时，不能在子类中重写该方法。例如，`public final void myMethod()` 表示子类不能覆盖此方法。
  - **用于变量**：当变量被声明为 `final` 时，它的值在初始化后不能再被改变。这对于定义常量很常用，例如，`final int MY_CONSTANT = 100;`。

### 2. `finally`
- **异常处理中的代码块**：`finally` 是与 `try-catch` 结构相关的，用来定义一段代码，这段代码无论是否抛出异常，都会被执行。
  - 它常用于释放资源，如关闭文件、数据库连接等。例如：
    ```java
    try {
        // 可能抛出异常的代码
    } catch (Exception e) {
        // 异常处理
    } finally {
        // 始终执行的代码（如关闭资源）
    }
    ```
  - 即使 `try` 块或 `catch` 块中有 `return` 语句，`finally` 块中的代码也会在方法返回之前执行。

### 3. `finalize`
- **垃圾回收机制中的方法**：`finalize()` 是 `Object` 类中的一个方法，当垃圾回收器准备回收对象时，会调用该对象的 `finalize()` 方法。这是程序在对象被销毁前执行清理工作的最后机会。
  - 这个方法通常不推荐被重写，因为垃圾回收器的行为是不可预测的，`finalize()` 的执行时间和执行保证性都不强。
  - 从 **Java 9** 开始，`finalize()` 已被标记为**过时**（deprecated），因为它可能带来性能问题，且有更好的替代方案（如 `try-with-resources` 和 `Cleaner`）。

### 总结：
- **`final`**：用于声明不可改变的类、方法或变量。
- **`finally`**：用于保证异常处理中的某些代码一定会被执行。
- **`finalize`**：用于对象在被垃圾回收前执行清理操作，但已经过时。

这三者虽然名称相似，但功能和使用场景完全不同。
