在Java中，方法重载（Overloading） 和 方法重写（Overriding） 是两个不同的概念，它们主要用于多态性和代码的灵活性。它们的区别如下：

1. 定义
方法重载 (Overloading)：

是在同一个类中定义多个同名的方法，但这些方法的参数列表不同（参数类型、个数、或顺序不同）。它是在编译时确定的。
目的在于增加方法的灵活性，使同名方法可以处理不同类型或数量的参数。
方法重写 (Overriding)：

是子类对父类中已存在的一个方法进行重新定义。方法名称、参数列表、返回类型必须与父类中的方法一致，但方法的实现不同。它是在运行时决定的。
目的是为了实现动态多态性，使子类能够根据自己的需求修改父类的方法行为。
2. 参数列表
重载：方法的参数列表必须不同，即参数类型、数量、或顺序不同。
重写：方法的参数列表必须相同，与父类中的方法保持一致。
3. 返回类型
重载：返回类型可以不同，但不能仅依赖于返回类型来区分重载方法，必须通过参数列表来区分。
重写：返回类型必须与父类方法的返回类型相同，或者是其协变返回类型（即返回类型可以是父类方法返回类型的子类）。
4. 访问修饰符
重载：访问修饰符没有要求，可以不同。
重写：访问修饰符可以相同或者比父类的访问修饰符更宽松，但不能更严格。例如，如果父类方法是public，那么子类的重写方法也必须是public。
5. 异常处理
重载：方法抛出的异常可以不同，不受限制。
重写：重写的方法不能抛出比父类方法更多或更广泛的异常（受检查异常）。可以抛出父类方法所抛异常的子类异常或不抛异常。
6. 静态性
重载：可以重载静态方法。
重写：不能重写静态方法，静态方法属于类本身，而不是对象。静态方法可以被子类隐藏，但不是真正的重写。
7. 发生时机
重载：是编译时多态，编译器通过参数列表选择合适的方法。
重写：是运行时多态，程序在运行时根据对象的类型来决定调用哪个方法。
代码示例
方法重载（Overloading）
java
复制代码
class OverloadExample {
    void display(int a) {
        System.out.println("Integer: " + a);
    }
    
    void display(String a) {
        System.out.println("String: " + a);
    }
    
    void display(int a, String b) {
        System.out.println("Integer and String: " + a + ", " + b);
    }
}
方法重写（Overriding）
java
复制代码
class Parent {
    void show() {
        System.out.println("Parent class method");
    }
}

class Child extends Parent {
    @Override
    void show() {
        System.out.println("Child class method");
    }
}
总结
方法重载是一种编译时多态性，允许同一类中的方法名称相同，但参数列表不同。
方法重写是一种运行时多态性，允许子类提供自己的实现，覆盖父类的同名方法。
