在Java泛型中，上下界限定符是用来限制泛型类型参数的类型范围。它们包括**上界（extends）**和**下界（super）**两个部分，通过使用这些限定符，你可以在泛型中设定类型参数的范围，从而增强代码的灵活性和安全性。

### 1. 上界限定符 (`extends`)
使用 `extends` 关键字，可以为泛型指定一个上限，即这个泛型类型必须是指定类或其子类。它用于约束泛型类型的**上界**。例如：

```java
public <T extends Number> void print(T t) {
    System.out.println(t);
}
```

在这个例子中，类型参数 `T` 必须是 `Number` 类或其子类（如 `Integer`、`Double` 等）。通过使用上界，你可以确保泛型类型至少具备特定父类中的方法或属性。

#### 常见使用场景：
- **读取操作**：当你想从某个泛型对象中获取数据时，可以使用上界限定符，因为你知道泛型对象的类型范围。例如，`List<? extends Number>` 表示一个包含 `Number` 或其子类对象的列表，但你不能向列表添加元素，因为你无法确定具体的子类类型。

### 2. 下界限定符 (`super`)
使用 `super` 关键字，指定泛型的下限，即这个泛型类型必须是指定类或其父类。它用于约束泛型类型的**下界**。例如：

```java
public <T super Integer> void add(List<T> list) {
    list.add(1);
}
```

在这个例子中，类型参数 `T` 必须是 `Integer` 或其父类（如 `Number` 或 `Object`）。下界限定符通常用于**写入操作**，因为你知道泛型对象可以接受特定的子类类型。

#### 常见使用场景：
- **写入操作**：当你想向泛型对象中添加数据时，可以使用下界限定符。比如，`List<? super Integer>` 表示一个可以存放 `Integer` 或其父类的列表，你可以向其中添加 `Integer` 或其子类的实例。

### 总结：
- **`extends`（上界）**：用于限定泛型类型的上界，常用于读取操作，确保泛型类型至少是指定类或其子类。
- **`super`（下界）**：用于限定泛型类型的下界，常用于写入操作，确保泛型类型至少是指定类或其父类。

上下界限定符为Java泛型提供了更强的灵活性和类型安全性，特别是在处理泛型集合、接口或类时，可以更好地控制类型的范围和操作。
