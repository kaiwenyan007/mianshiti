在Java中，继承（Inheritance）是面向对象编程的重要概念之一，它允许一个类（称为子类或派生类）基于另一个类（称为父类或基类）来扩展和复用代码。继承机制通过类之间的层次关系实现代码的重用和扩展。

### 主要概念和特点：

1. **父类和子类：** 
   - **父类（基类）：** 定义了通用的属性和行为。子类可以继承父类的属性和方法。
   - **子类（派生类）：** 可以扩展或修改父类的功能，同时可以添加新的属性和方法。

2. **继承关系：**
   - 子类通过关键字 `extends` 来继承一个父类。例如：`class Subclass extends Superclass { ... }`
   - 子类可以直接访问和使用父类的非私有成员（即公有、受保护和默认访问级别的成员）。

3. **特点和优势：**
   - **代码复用：** 子类可以复用父类的代码，避免重复编写相似功能。
   - **扩展性：** 子类可以在不修改父类源代码的情况下，通过添加新的方法和属性来扩展功能。
   - **多态性支持：** 继承是多态性的基础，通过父类类型引用指向子类对象，实现方法的动态绑定。

4. **访问控制和构造方法：**
   - 子类可以访问父类的公有和受保护成员，但不能访问父类的私有成员。
   - 子类必须调用父类的构造方法来初始化父类的状态，可以通过 `super()` 调用父类的构造方法。

5. **方法重写（Override）：**
   - 子类可以根据需要重写（覆盖）父类的方法，提供自己特定的实现。使用 `@Override` 注解来明确表明方法是重写父类方法。

6. **单继承和多继承：**
   - Java 中支持单继承，即一个子类只能继承一个直接的父类。这是为了避免多继承可能带来的复杂性和冲突。
   - 接口（Interface）提供了多继承类似的功能，一个类可以实现多个接口。

继承是Java中实现代码重用和构建复杂软件系统的重要工具之一，正确使用继承可以提高代码的可维护性、可扩展性和复用性。
