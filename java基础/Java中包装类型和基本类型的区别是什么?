在 Java 中，基本类型 和 包装类型 有以下主要区别：

1. 类型分类
基本类型（Primitive Types）：Java 提供了 8 种基本数据类型，包括：

byte
short
int
long
float
double
char
boolean
基本类型直接存储值，且不属于对象，是非引用类型。它们在栈（stack）中分配内存，性能较高。

包装类型（Wrapper Classes）：每个基本类型都有相应的包装类（位于 java.lang 包下）：

Byte
Short
Integer
Long
Float
Double
Character
Boolean
包装类型是对象，它们将基本类型的值包装在对象中。因此，包装类允许在需要对象的地方使用基本类型。

2. 内存分配
基本类型 的数据存储在栈内存中，因为它们直接存储值，内存占用少，性能高。
包装类型 的对象存储在堆（heap）内存中，引用存储在栈内存中。因此，包装类型的内存分配和管理相比基本类型要复杂。
3. 默认值
基本类型：默认值取决于类型，如 int 默认值为 0，boolean 默认值为 false。
包装类型：包装类型的默认值是 null，因为它们是对象类型。
4. 使用场景
基本类型 更适合在高性能场景下使用，因为它们内存占用少，访问速度快。
包装类型 则用于需要对象的场景，如泛型、集合类（如 ArrayList、HashMap）等。例如，集合类只能存储对象，无法存储基本类型，因此需要使用包装类型。
5. 自动装箱和拆箱（Autoboxing and Unboxing）
从 Java 5 开始，Java 引入了 自动装箱（Autoboxing） 和 拆箱（Unboxing）：

自动装箱：将基本类型自动转换为相应的包装类型对象。例如，将 int 自动转换为 Integer。
java
复制代码
int num = 5;
Integer obj = num;  // 自动装箱
自动拆箱：将包装类型自动转换为相应的基本类型。例如，将 Integer 自动转换为 int。
java
复制代码
Integer obj = 10;
int num = obj;  // 自动拆箱
6. 性能
基本类型 的性能要比包装类型高，因为它们直接存储在栈上，而包装类型涉及堆内存的对象管理。
包装类型 由于是对象，在某些场景下性能会有所损耗，如频繁的装箱和拆箱操作可能会影响效率。
总结
基本类型 是非对象、栈上存储，性能较好，适用于数值计算、性能关键的场景。
包装类型 是对象、堆上存储，支持更多的对象操作（如在集合类中使用），但性能较低，且可能会导致 null 值问题。
了解基本类型和包装类型的区别有助于在开发中做出正确的选择，平衡性能和灵活性。
