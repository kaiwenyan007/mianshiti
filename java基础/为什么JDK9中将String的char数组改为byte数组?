在 JDK 9 中，Java 的内部实现中对 String 类做了一些优化和改进，其中的一个重要变化就是将 String 的内部存储结构从 char 数组改为 byte 数组。这个改变主要是为了节省内存空间和提升性能。

### 原因包括：

1. **节省内存空间：** 在许多应用场景下，特别是处理非英语字符的时候，使用 UTF-16 编码（char 数组）会造成内存浪费。UTF-16 编码中，大部分字符占用两个字节（16 位），而在实际使用中，许多字符并不需要这么多的空间。改用 byte 数组存储可以更精确地匹配字符所需的字节数，从而节省内存。

2. **性能优化：** 使用 byte 数组存储字符串可以提高字符串处理的效率。对于很多字符串操作（如比较、拼接等），byte 数组的处理速度可能会比 char 数组更快，因为它们涉及的数据量更小。

3. **适应现代编码需求：** 随着国际化和多语言应用的普及，许多应用程序需要更好地支持不同的字符编码和字符集。byte 数组存储可以更灵活地适应不同编码的需求，而不仅仅局限于 UTF-16 编码。

4. **内存管理的改进：** 在 Java 9 中，字符串的内部表示也经过了优化，使得 JVM 在内存管理方面更高效，包括更好地与堆外内存和元空间（Metaspace）的集成。

总体来说，这些变化是为了使 Java 更适应现代应用程序的需求，尤其是在处理大量文本和国际化方面。通过改进字符串的内部表示，Java 在性能和内存利用率上都有了显著的提升。
