在 Java 中，如果一个线程已经被调用过 `start()` 方法启动了，那么再次调用 `start()` 方法会导致 `IllegalThreadStateException` 异常的抛出。这是因为线程对象的生命周期与其调用 `start()` 方法后的状态相关联，一旦线程启动，它就进入了运行状态或者至少准备运行状态，此时再次调用 `start()` 方法是不允许的。

具体来说，线程的生命周期如下：
1. **New（新建）状态：** 线程对象被创建，但还没有调用 `start()` 方法。
2. **Runnable（可运行）状态：** 通过调用 `start()` 方法，线程进入了可运行状态。此时系统可以在适当的时候调度它来执行。
3. **Running（运行）状态：** 线程被系统调度执行其任务。
4. **Terminated（终止）状态：** 线程执行完毕或者因异常退出，进入终止状态。

如果线程已经处于运行或者可运行状态（调用过 `start()`），再次调用 `start()` 方法会导致 `IllegalThreadStateException` 异常的抛出。这是 Java 线程机制的保护措施，防止在不合适的状态下对线程进行重复启动，从而避免可能的混乱和不确定性。

因此，正确的线程生命周期管理是很重要的，确保在需要启动线程时只调用一次 `start()` 方法，以避免异常和不必要的问题。
