在Java中，`hashCode` 和 `equals` 方法用于对象的比较和哈希表等集合中的行为。它们与`==`操作符存在关键区别：

### 1. **`hashCode()` 方法**
   - **定义**：返回对象的哈希值，是一个整数，通常由对象的内存地址或者其他信息计算得出。
   - **作用**：在基于哈希的集合中（如`HashMap`、`HashSet`等）起作用。对象的哈希值决定其在哈希表中的位置。
   - **合同**：如果两个对象通过`equals()`方法被判定为相等，那么它们的`hashCode()`值也必须相同。否则，哈希结构无法正常工作。
   
   示例：
   ```java
   @Override
   public int hashCode() {
       return Objects.hash(id, name); // 使用对象属性生成哈希值
   }
   ```

### 2. **`equals()` 方法**
   - **定义**：用于比较两个对象是否相等。默认实现是比较对象的内存地址（即与`==`相同），但可以被重写用于比较对象的内容。
   - **作用**：在Java中，`equals` 用于比较两个对象的“逻辑相等性”，而非它们是否是同一个对象。它在集合类（如`List`、`Set`等）中尤其重要。
   - **合同**：重写`equals`方法时，需要确保自反性、对称性、传递性和一致性。

   示例：
   ```java
   @Override
   public boolean equals(Object obj) {
       if (this == obj) return true;
       if (obj == null || getClass() != obj.getClass()) return false;
       MyObject other = (MyObject) obj;
       return id == other.id && Objects.equals(name, other.name);
   }
   ```

### 3. **`==` 操作符**
   - **作用**：用于比较两个对象是否引用同一个内存地址，即是否是同一个对象实例。对于基本类型，`==`比较的是它们的值。
   - **区别**：`==`比较的是**引用相等性**，而`equals`方法比较的是**逻辑相等性**（可由开发者定义）。

### **`hashCode()`、`equals()`与`==`的区别总结**
   - `==` 比较两个对象的内存地址（引用是否相同）。
   - `equals()` 用于比较两个对象是否逻辑相等，通常需要重写。
   - `hashCode()`返回对象的哈希码，用于快速查找和存储在基于哈希的数据结构中。

**注意**：若重写`equals()`方法，必须同时重写`hashCode()`方法，以保证在使用哈希相关的集合时，一致性不被破坏。

