在Java中，`wait()`和`sleep()`是用于线程控制的两个方法，它们有以下区别：

1. **wait():**
   - `wait()`方法是`Object`类中定义的方法，因此它可以用于任意对象实例。
   - 在调用`wait()`方法时，当前线程会释放对象的锁，并进入等待状态，直到其他线程调用相同对象的`notify()`或`notifyAll()`方法唤醒它，或者等待超时。
   - `wait()`方法通常与`synchronized`关键字一起使用，用于实现线程间的协调与通信。

   示例用法：
   ```java
   synchronized (obj) {
       while (condition) {
           obj.wait(); // 等待条件满足或者被唤醒
       }
       // 执行需要的操作
   }
   ```

2. **sleep():**
   - `sleep()`方法是`Thread`类的静态方法，调用时会使当前线程进入睡眠状态（即阻塞状态）指定的时间。
   - 在调用`sleep()`期间，线程不会释放对象的锁。
   - `sleep()`方法通常用于暂停执行一段时间，不涉及线程间的协调或通信。

   示例用法：
   ```java
   try {
       Thread.sleep(1000); // 暂停1秒钟
   } catch (InterruptedException e) {
       e.printStackTrace();
   }
   ```

总结来说，主要区别在于：
- `wait()`是对象级别的方法，用于线程间的等待和通知机制，并且会释放锁。
- `sleep()`是线程级别的方法，用于让当前线程休眠一段时间，不释放锁。

在使用时需要根据具体的需求选择合适的方法来控制线程的行为。
