MySQL 选择 B+ 树作为索引结构，主要是因为 B+ 树的设计特性非常适合数据库系统的高效查询需求。以下是选择 B+ 树的主要原因：

### 1. 高效的范围查询支持

- **链表结构便于顺序查找**：B+ 树的所有叶子节点按照键值顺序排列并通过双向链表连接，因此在执行范围查询（如 `BETWEEN`、`>`、`<` 等操作）时，可以直接从起始叶子节点开始，顺序遍历链表获取数据。相比 B- 树等其他树结构，B+ 树的范围查询更高效。
- **批量读取优化**：由于叶子节点形成链表，可以顺序访问相邻节点，减少磁盘随机读的开销，提高查询效率。

### 2. 节省内存并减少 I/O 操作

- **高扇出率**：B+ 树的每个节点包含多个键值和指针，具有较高的扇出率（即每个节点可以拥有的子节点数量较多）。这使得 B+ 树的层级较少，通常是 2 到 4 层，可以将整个树的结构较为紧凑地存储。
- **减少磁盘访问**：高扇出率和少层级的特性，使得在查找数据时需要的磁盘 I/O 次数较少。由于数据库查询往往会涉及磁盘读写操作，B+ 树可以减少对磁盘的访问次数，提高整体查询性能。

### 3. 稳定的查询效率

- **所有数据位于叶子节点**：B+ 树的所有实际数据（或数据指针）都存储在叶子节点中，这意味着无论数据大小如何，查询路径的深度是相同的。B+ 树因此具有平衡性，确保每次查询的时间复杂度为 O(log n)，即使数据量非常大，性能也相对稳定。
- **避免节点分裂影响查询路径**：B+ 树的数据存储在叶子节点上，分裂或合并操作只发生在叶子节点，不会影响中间节点的索引结构，从而保持查询路径的稳定。

### 4. 更适合磁盘存储的特性

- **块存储优化**：B+ 树节点的结构与磁盘块的存储结构非常匹配。每个节点会存储多个键值，能够充分利用每个磁盘页的存储空间，提高了数据的加载和读取效率。
- **减少树节点调整的复杂度**：B+ 树的叶子节点使用链表连接，即使插入或删除操作导致节点分裂或合并，链表结构可以在不影响其他节点的情况下完成调整，这对于需要频繁修改数据的数据库系统非常重要。

### 5. 覆盖索引和无回表查询

- **支持覆盖索引**：在 B+ 树索引中，叶子节点存储实际的数据（如主键索引存储主键和对应数据），可以直接满足查询的列需求，避免回表操作。例如，在选择性高的查询中，B+ 树索引能够直接返回结果，减少了 I/O 操作，提升了查询效率。

### 总结

MySQL 选择 B+ 树作为索引结构，主要是因为它具备高效的范围查询能力、较少的磁盘 I/O 操作、稳定的查询性能、对磁盘存储的优化以及覆盖索引的支持。B+ 树的结构特性恰好满足数据库系统高效数据存储与访问的需求，是一种适用于大数据量的、具备出色查询性能的索引结构。
