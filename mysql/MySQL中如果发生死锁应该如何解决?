在 MySQL 中，死锁是一种特殊的情况，多个事务相互等待对方释放资源，导致它们都无法继续执行。解决死锁通常需要采取以下措施：

### 1. **检测死锁**

MySQL 的 InnoDB 存储引擎具备自动检测死锁的能力。当发生死锁时，InnoDB 会自动终止其中一个事务以打破循环依赖，释放资源，使其他事务能够继续执行。

### 2. **死锁日志**

- **查看死锁日志**：当 InnoDB 检测到死锁并终止事务后，会记录死锁信息到错误日志中。可以使用以下命令查看最近的死锁信息：
  ```sql
  SHOW ENGINE INNODB STATUS;
  ```
  该命令会显示最近的死锁信息，包括涉及的事务和锁定的资源。

### 3. **优化事务设计**

- **缩短事务时间**：尽量减少事务中包含的操作，避免长时间持有锁。
- **减少锁的粒度**：使用行级锁而不是表级锁，减少对其他事务的影响。
- **按一致顺序访问资源**：确保多个事务访问表或行时，遵循相同的顺序，以降低死锁发生的概率。

### 4. **重试机制**

- **捕获异常并重试**：在应用层捕获因死锁引发的异常，适当实现重试逻辑。建议在应用中进行重试时，稍微引入随机延迟，以避免连续重试可能导致的再次死锁。

### 5. **使用合适的隔离级别**

- **选择合适的隔离级别**：根据业务需求，选择适合的事务隔离级别。较低的隔离级别（如 READ COMMITTED）可以降低死锁发生的概率，但需权衡数据一致性。

### 6. **监控和分析**

- **定期监控**：定期检查数据库的锁情况和事务的执行状态，使用性能监控工具分析可能的死锁情况。
- **数据库优化**：定期进行数据库优化，包括索引优化和查询优化，以减少长事务和锁竞争的可能性。

### 总结

处理 MySQL 中的死锁需要及时检测、日志分析、优化事务设计和实现重试机制。通过改进应用逻辑和数据库设计，可以有效降低死锁的发生频率，提高系统的整体性能和稳定性。
