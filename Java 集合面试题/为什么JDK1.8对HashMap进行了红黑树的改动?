JDK1.8对HashMap进行了红黑树的改动，主要是为了提高性能和处理哈希冲突的效率。具体原因包括：

1. **降低查找时间**：当链表长度超过8个节点时，HashMap会将链表转换为红黑树。这是因为链表在最坏情况下查找时间复杂度为O(n)，而红黑树的查找时间复杂度为O(log n)，极大地提高了性能。

2. **提升性能**：在高负载情况下，特别是在大量哈希冲突的场景中，链表的效率会显著下降。引入红黑树后，HashMap可以更好地处理这种情况，保持较好的性能表现。

3. **空间利用**：红黑树能够更高效地利用内存，减少链表带来的额外空间开销。

通过这种改动，HashMap在处理大量数据时能够保持更高的效率，提升了整体的性能。
