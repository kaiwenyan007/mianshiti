Java中`ConcurrentHashMap`在1.7和1.8之间有几个主要区别：

1. **数据结构**：
   - **1.7**：使用分段锁（Segment）机制，每个段有自己的锁，允许多个线程并行访问不同段的数据。
   - **1.8**：使用更细粒度的锁机制，采用了节点（Node）锁，而不是段锁。通过CAS（Compare-And-Swap）操作减少了锁的粒度，进一步提高并发性能。

2. **扩容机制**：
   - **1.7**：在扩容时，整个表会被锁住，所有操作会被阻塞，扩容过程比较慢。
   - **1.8**：采用了非阻塞的扩容方式，使用CAS和分段复制的方法，允许在扩容期间读和写操作，提升了性能。

3. **迭代器**：
   - **1.7**：迭代器是弱一致的，但在迭代过程中，如果发生结构变化，会抛出`ConcurrentModificationException`。
   - **1.8**：迭代器更加鲁棒，即使在并发修改的情况下，也能保持一致性，使用`node.next`遍历结构。

4. **性能优化**：
   - **1.8**：引入了`computeIfAbsent`等方法，提供了更方便的原子操作接口，进一步提升性能。

总体而言，1.8版本的`ConcurrentHashMap`在设计上更加优化，性能更高，使用更灵活。
