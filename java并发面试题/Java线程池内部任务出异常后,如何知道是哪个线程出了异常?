在Java线程池中，如果任务内部发生了异常，通常可以通过以下几种方式来确定是哪个线程抛出了异常：

1. **使用 `Future` 获取异常信息**：
   如果任务通过 `submit()` 方法提交给线程池，并且返回了 `Future` 对象，你可以通过 `Future` 对象的 `get()` 方法获取任务执行过程中抛出的异常（如果有的话）。

   ```java
   ExecutorService executor = Executors.newFixedThreadPool(10);
   Future<?> future = executor.submit(() -> {
       // 任务代码，可能会抛出异常
   });

   try {
       future.get(); // 获取任务的执行结果，如果有异常会在这里抛出 ExecutionException
   } catch (ExecutionException e) {
       Throwable cause = e.getCause(); // 获取实际的异常信息
       if (cause != null) {
           cause.printStackTrace();
       }
   }
   ```

2. **通过实现 `Thread.UncaughtExceptionHandler`**：
   可以为线程池中的线程设置一个统一的异常处理器，用来处理未捕获的异常。当线程抛出未捕获的异常时，异常处理器会被调用，可以在其中记录日志或者进行其他处理。

   ```java
   ExecutorService executor = Executors.newFixedThreadPool(10);
   ((ThreadPoolExecutor) executor).setThreadFactory(new ThreadFactory() {
       @Override
       public Thread newThread(Runnable r) {
           Thread thread = new Thread(r);
           thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
               @Override
               public void uncaughtException(Thread t, Throwable e) {
                   System.err.println("Thread " + t.getName() + " threw an exception: " + e);
               }
           });
           return thread;
       }
   });

   executor.submit(() -> {
       // 任务代码，可能会抛出异常
   });
   ```

3. **通过自定义任务类**：
   如果任务是自定义的实现类，可以在任务执行过程中捕获异常并记录日志或者其他操作，使得你能够更容易地追踪到异常发生的线程。

   ```java
   class CustomTask implements Runnable {
       @Override
       public void run() {
           try {
               // 任务代码，可能会抛出异常
           } catch (Exception e) {
               System.err.println("Exception occurred in thread " + Thread.currentThread().getName() + ": " + e);
           }
       }
   }

   ExecutorService executor = Executors.newFixedThreadPool(10);
   executor.submit(new CustomTask());
   ```

通过这些方式，你可以根据实际需求来确定如何捕获和处理线程池中任务抛出的异常，以便更好地进行问题排查和处理。
