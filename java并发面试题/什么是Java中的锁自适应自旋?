Java 中的锁自适应自旋是一种优化技术，旨在提高多线程环境下锁的性能。其基本思想是根据线程竞争的情况动态调整自旋的次数，避免在竞争不激烈的情况下进行过多的上下文切换。

### 原理：

1. **自旋**：当线程请求锁时，如果锁已经被其他线程持有，线程会进入自旋状态，持续循环尝试获取锁，而不是立即进入阻塞状态。

2. **自适应**：自适应自旋根据之前的锁竞争情况来调整自旋的次数。如果在之前的尝试中，锁竞争较少，线程会进行更多的自旋；而如果竞争激烈，线程则会快速进入阻塞状态，减少自旋的时间。

3. **性能提升**：通过自适应自旋，可以减少线程在短时间内频繁地进入和退出阻塞状态，从而提升性能，尤其在高并发场景下，可以有效减少由于上下文切换带来的开销。

Java 的 HotSpot JVM 在实现自适应自旋锁时，结合了锁的竞争情况和 CPU 的性能，动态调整自旋的次数，以优化线程的执行效率。
