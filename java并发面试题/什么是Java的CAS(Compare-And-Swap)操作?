CAS（Compare-And-Swap）是一种原子操作，常用于实现无锁算法。在Java中，CAS用于更新变量时，先比较变量当前值与预期值是否相同，如果相同，则将其更新为新值。这个过程是原子的，避免了多线程环境下的竞争条件。CAS操作的优点是提高了并发性能，但也可能导致ABA问题。
CAS（Compare-And-Swap）操作的原理如下：

1. **读取当前值**：线程读取目标变量的当前值。
2. **比较**：将当前值与期望的旧值进行比较。
3. **更新**：如果当前值与期望的旧值相同，则将目标变量更新为新值；否则，操作失败。

这个过程是原子的，意味着在操作过程中不会被其他线程打断。CAS利用硬件提供的原子指令实现，无需加锁，从而提高了并发性能。不过，CAS也有可能导致“自旋”问题，即如果频繁失败，线程会一直循环尝试，可能造成CPU资源浪费。
