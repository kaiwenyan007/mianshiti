`CountDownLatch` 是 Java 并发包中的一个工具类，用于实现线程间的计数等待机制。其基本思想是：一个或多个线程等待其他线程完成操作后再执行。具体来说：

- **功能**：`CountDownLatch` 通过一个计数器来实现，该计数器初始化一个数值，表示需要等待的操作数。每当一个线程完成了自己的任务后，计数器的值就会减一。当计数器的值变为零时，所有因调用 `await()` 方法而等待的线程都会被释放，可以继续执行。

- **使用场景**：
  - 控制一个或多个线程等待，直到其他线程完成某些操作，如数据加载、资源初始化等。
  - 实现多个线程开始执行前等待其他多个线程执行完成的场景。

- **示例**：
  ```java
  import java.util.concurrent.CountDownLatch;

  public class Example {
      public static void main(String[] args) throws InterruptedException {
          CountDownLatch latch = new CountDownLatch(3); // 初始化计数器为3

          Runnable task = () -> {
              try {
                  // 模拟任务执行
                  Thread.sleep(1000);
                  System.out.println("任务完成");
                  latch.countDown(); // 计数器减一
              } catch (InterruptedException e) {
                  Thread.currentThread().interrupt();
              }
          };

          // 启动三个线程执行任务
          new Thread(task).start();
          new Thread(task).start();
          new Thread(task).start();

          // 等待所有任务完成
          latch.await(); // 主线程阻塞，直到计数器变为0

          System.out.println("所有任务已完成");
      }
  }
  ```

  上述例子中，三个线程分别执行任务，每执行完一个任务，计数器减一，直到所有线程执行完成，主线程才会输出 "所有任务已完成"。

`CountDownLatch` 是一个非常实用的多线程工具，能够有效地协调多个线程的执行顺序和操作结果，常用于并发编程中需要控制多个线程协同工作的场景。
