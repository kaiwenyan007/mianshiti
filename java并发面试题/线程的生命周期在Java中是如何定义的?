在Java中，线程的生命周期可以分为以下几个状态：

1. **New（新建状态）**：
   - 当线程对象被创建但还未调用 `start()` 方法时，线程处于新建状态。

2. **Runnable（可运行状态）**：
   - 线程一旦调用了 `start()` 方法，就进入了可运行状态。
   - 处于可运行状态的线程可能正在运行，也可能正在等待系统资源（如处理器时间）。

3. **Blocked（阻塞状态）**：
   - 线程被阻塞是因为等待一个监视器锁，通常发生在以下情况下：
     - 调用了 `sleep()` 方法。
     - 调用了 `wait()` 方法，等待唤醒或者超时。
     - 等待输入/输出完成。
   - 线程在阻塞状态时不会占用处理器资源。

4. **Waiting（等待状态）**：
   - 线程在等待某个条件，不会被分派处理器资源。
   - 可能是调用了 `Object.wait()` 方法，或者类似的等待方法。

5. **Timed Waiting（计时等待状态）**：
   - 线程等待另一个线程执行一个动作，等待超时后会自动恢复。
   - 可能是调用了 `Thread.sleep()` 或 `Object.wait(timeout)` 等方法。

6. **Terminated（终止状态）**：
   - 线程执行完了 `run()` 方法中的任务，或者因为异常退出了 `run()` 方法，进入了终止状态。
   - 一旦线程进入了终止状态，它就不能再进入任何其他状态。

Java中的线程生命周期如上所述，线程可以在这些状态之间转换，由JVM根据线程的状态和调度情况进行管理。
