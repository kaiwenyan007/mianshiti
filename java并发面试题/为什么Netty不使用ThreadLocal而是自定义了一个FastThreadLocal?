Netty 自定义了 `FastThreadLocal`，主要是为了优化性能和解决 `ThreadLocal` 的一些不足之处，具体原因包括：

1. **性能优化**：
   - `FastThreadLocal` 通过减少对象的创建和内存分配来提升性能，尤其是在高并发场景下。Netty 在处理大量并发请求时，性能至关重要，因此它优化了 `ThreadLocal` 的实现。

2. **内存管理**：
   - `FastThreadLocal` 使用了更高效的内存管理方式，避免了 `ThreadLocal` 中可能出现的内存泄漏问题。它确保在不需要的时候可以及时回收。

3. **快速访问**：
   - `FastThreadLocal` 提供了更快速的访问机制，减少了访问 `ThreadLocal` 变量时的查找时间，使得数据的获取和设置更加高效。

4. **降低上下文切换成本**：
   - 在高负载情况下，标准的 `ThreadLocal` 可能会导致上下文切换的增加，而 `FastThreadLocal` 通过减少线程切换的频率来降低这方面的成本。

5. **灵活性**：
   - `FastThreadLocal` 提供了一些额外的功能，如线程清理机制，帮助开发者更好地管理和清理线程局部变量，避免因未清理导致的内存泄漏。

综上所述，Netty 选择实现 `FastThreadLocal` 是为了在高性能网络编程中更好地满足性能需求和资源管理，提供比标准 `ThreadLocal` 更加灵活和高效的解决方案。
