`Semaphore`（信号量）是 Java 中的一种并发控制工具，用于管理同时访问特定资源的线程数量。它维护了一组许可证，控制能够同时访问某一资源的线程数目。Semaphore 有两种模式：**公平模式**和**非公平模式**，默认是非公平模式。

在 Semaphore 中，主要有两个核心方法：

1. `acquire()`: 获取一个许可证，如果没有许可证可用，线程将阻塞直到有许可证可用或者被中断。
2. `release()`: 释放一个许可证，使其可以被其他等待的线程获取。

Semaphore 可以用来实现一些常见的并发场景，如控制同时访问资源的线程数量、实现连接池限流等。例如，假设有一个数据库连接池，我们可以使用 Semaphore 来限制同时使用连接的线程数量，避免连接池过载。

示例代码如下：

```java
import java.util.concurrent.Semaphore;

public class SemaphoreExample {
    public static void main(String[] args) {
        // 创建一个初始许可数为3的 Semaphore，即最多允许3个线程同时访问
        Semaphore semaphore = new Semaphore(3);

        // 模拟多个线程同时请求资源
        for (int i = 1; i <= 5; i++) {
            Thread thread = new Thread(new Worker(semaphore, i));
            thread.start();
        }
    }

    static class Worker implements Runnable {
        private final Semaphore semaphore;
        private final int id;

        public Worker(Semaphore semaphore, int id) {
            this.semaphore = semaphore;
            this.id = id;
        }

        @Override
        public void run() {
            try {
                // 请求一个许可证
                semaphore.acquire();
                System.out.println("Worker " + id + " is working...");
                Thread.sleep(2000); // 模拟工作时间
                System.out.println("Worker " + id + " has finished.");
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                // 释放许可证
                semaphore.release();
            }
        }
    }
}
```

在这个例子中，Semaphore 控制了同时运行的线程数量，每个 Worker 线程在开始工作时通过 `acquire()` 获取许可证，工作完成后通过 `release()` 释放许可证。
