`Thread.sleep()` 和 `Thread.yield()` 在 Java 中都是控制线程执行的方式，但它们的功能和效果不同：

### Thread.sleep()

- **功能**：使当前线程暂停指定的时间（以毫秒为单位），不进行任何操作。
- **效果**：在休眠期间，线程不会被调度执行，释放 CPU 资源。休眠时间结束后，线程会返回就绪状态，等待 CPU 调度。
- **应用场景**：用于控制线程的执行时间，比如等待某些条件的出现，或者为了减少资源消耗。

### Thread.yield()

- **功能**：建议当前线程暂停执行，允许其他线程执行。
- **效果**：当前线程会让出 CPU 资源，但并不保证其他线程会立即执行。具体效果依赖于线程调度器的实现。
- **应用场景**：通常用于提高线程的协作性，让其他同优先级的线程获得执行机会，尤其在多线程竞争时。

### 总结

- `Thread.sleep()` 是一个强制性暂停，而 `Thread.yield()` 是一个建议性暂停。
- `sleep()` 会导致线程在指定时间内完全不执行，而 `yield()` 则是让当前线程主动放弃 CPU，但可能会立即被调度继续执行。
