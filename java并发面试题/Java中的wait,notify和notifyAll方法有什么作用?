在 Java 中，`wait`、`notify` 和 `notifyAll` 是用于线程间通信的三个关键方法，主要用于处理线程的协作和同步。这些方法都属于 `Object` 类，因此可以在任何对象上调用。

### 1. `wait()` 方法

- **作用**：使当前线程等待，直到其他线程调用同一个对象的 `notify()` 或 `notifyAll()` 方法。
- **特点**：
  - 当前线程必须持有对象的监视器锁（即在 synchronized 块或方法中调用 `wait()`）。
  - 当调用 `wait()` 后，当前线程释放了监视器锁，并进入等待状态。
  - 等待状态的线程会被唤醒后重新争夺监视器锁。

### 2. `notify()` 方法

- **作用**：随机唤醒一个正在等待该对象监视器的线程。
- **特点**：
  - 线程必须持有对象的监视器锁才能调用 `notify()`。
  - 唤醒的线程会在当前线程释放监视器锁后，争夺锁并继续执行。

### 3. `notifyAll()` 方法

- **作用**：唤醒所有正在等待该对象监视器的线程。
- **特点**：
  - 同样，调用 `notifyAll()` 的线程必须持有对象的监视器锁。
  - 所有被唤醒的线程会在当前线程释放监视器锁后争夺锁，可能会有多个线程被唤醒并竞争执行。

### 使用场景

- **生产者-消费者模型**：在这种情况下，`wait()`、`notify()` 和 `notifyAll()` 常用于控制生产者和消费者之间的协调。例如，当缓冲区满时，生产者线程会调用 `wait()` 让自己等待；当有消费者消费了产品后，消费者会调用 `notify()` 或 `notifyAll()` 来唤醒生产者。
- **实现条件变量**：通过这些方法，可以在不同的条件下控制线程的执行顺序和行为。

### 注意事项

- 使用 `wait()` 和 `notify()` 时，确保在 `synchronized` 块中调用它们。
- 适当选择 `notify()` 或 `notifyAll()`，一般情况下，如果只唤醒一个线程，使用 `notify()` 更高效；如果不确定哪个线程会被唤醒，或希望所有线程都能有机会执行，则使用 `notifyAll()`。
- 这些方法必须与 `try-catch` 块一起使用，以处理 `InterruptedException`。
