在 Java 中，轻量级锁（Lightweight Lock）确实会进行自旋。轻量级锁是一种优化的锁机制，旨在减少线程在竞争锁时的上下文切换。

当一个线程尝试获取轻量级锁时，它会首先尝试使用 **自旋** 的方式进行获取。如果锁的拥有者是当前线程，它将成功获得锁（重入）。如果锁已经被其他线程占用，当前线程会进入自旋状态，使用 **CAS（Compare-And-Swap）** 操作来尝试获取锁。

如果自旋的次数超过一定阈值（在自旋后仍未成功获取锁），线程会升级为 **重量级锁**，此时会进入阻塞状态，等待锁的释放。因此，自旋是在轻量级锁的机制中一个重要的组成部分。

是的，轻量级锁的实现和 JDK 版本有关系。JDK 1.6 及之后的版本引入了自旋锁和轻量级锁的概念。在 JDK 1.6 中，轻量级锁和自旋锁的机制得到了显著优化，使得在竞争不激烈的情况下，线程能够以较小的开销获取锁。

随着版本的更新，JDK 对锁的实现进行了不断优化，例如在 JDK 1.8 中，锁的竞争策略和自旋次数等都可能有所不同。因此，具体的行为和性能表现可能会受到 JDK 版本的影响。
