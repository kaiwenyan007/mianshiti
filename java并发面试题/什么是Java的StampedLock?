`StampedLock` 是 Java 8 中引入的一种新的读写锁机制，相比传统的 `ReentrantReadWriteLock`，`StampedLock` 提供了更高的并发性能。它的设计目标是在读多写少的场景下优化性能。

**特点和用途**：
- **乐观读锁（Optimistic Read）**：允许多个线程同时访问共享资源，不阻塞写线程，但需要在使用资源前检查版本号是否发生变化。
  
- **悲观读锁和写锁**：与传统的读写锁类似，读锁和写锁是互斥的，读锁可以与乐观读锁共存，写锁与任何其他锁（读锁和写锁）都互斥。

- **适用场景**：适用于读多写少的场景，比如缓存系统，读取操作频繁且需要较高的并发性能。

**示例**：
```java
import java.util.concurrent.locks.StampedLock;

public class Point {
    private double x, y;
    private final StampedLock sl = new StampedLock();

    void move(double deltaX, double deltaY) {
        long stamp = sl.writeLock(); // 获取写锁
        try {
            x += deltaX;
            y += deltaY;
        } finally {
            sl.unlockWrite(stamp); // 释放写锁
        }
    }

    double distanceFromOrigin() {
        long stamp = sl.tryOptimisticRead(); // 尝试获取乐观读锁
        double currentX = x, currentY = y;
        if (!sl.validate(stamp)) { // 检查版本号是否发生变化
            stamp = sl.readLock(); // 版本号发生变化，获取悲观读锁
            try {
                currentX = x;
                currentY = y;
            } finally {
                sl.unlockRead(stamp); // 释放悲观读锁
            }
        }
        return Math.sqrt(currentX * currentX + currentY * currentY);
    }
}
```

在上述示例中，`StampedLock` 的 `move` 方法使用写锁更新坐标，`distanceFromOrigin` 方法使用乐观读锁（如果乐观读失败，则转为悲观读锁）计算当前点到原点的距离。

总体而言，`StampedLock` 提供了一种灵活且高效的读写锁实现，特别适合读多写少且要求高并发性能的场景。
